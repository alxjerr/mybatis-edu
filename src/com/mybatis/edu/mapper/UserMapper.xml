<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，用于隔离SQL语句，后续有重要作用
     #{} : 占位符，相当于jdbc 的 ?
     ${} : 字符串拼接指令
 -->

<!-- 动态代理开发规则：
    1.namespace必须是接口的全路径名
    2.接口的方法名必须与 sql id一致
    3.接口的入参必须与parameterType类型一致
    4.接口的返回值必须与resultType类型一致
 -->
<mapper namespace="com.mybatis.edu.mapper.UserMapper">

    <!-- SQL片段定义 -->
    <sql id="user_sql">
      id,
      username,
      birthday,
      sex,
      address
    </sql>

    <!--
        id:sql id,SQL语句的唯一标识
        parameterType:入参的数据类型
        resultType:返回结果的数据类型
    -->
    <select id="getUserById" parameterType="int" resultType="com.mybatis.edu.pojo.User">
        select
        <!-- sql 片段使用：引用定义好的SQL片段的id -->
        <include refid="user_sql"/>
        from USER
        where id = #{id2}
    </select>


    <!-- 如果返回结果为集合，只需设置每一个的数据类型 -->
    <select id="getUserByUserName" parameterType="string" resultType="com.mybatis.edu.pojo.User">
        select
        <include refid="user_sql"/>
        from USER
        <!-- where username like #{name}-->
        where username like '%${value}%'
    </select>

    <!-- 插入用户 -->
    <!-- useGeneratedKeys:使用自增 keyProperty与之配套使用，这里是user的主键 -->
    <insert id="insertUser" parameterType="com.mybatis.edu.pojo.User" useGeneratedKeys="true" keyProperty="id">
        <!--
            selectKey：主键返回
            keyProperty:user中的主键属性
            resultType:主键数据类型
            order:指定selectKey何时执行：AFTER之后 -->
        <!--
            <selectKey keyProperty="id" resultType="int" order="AFTER">
                SELECT LAST_INSERT_ID()
            </selectKey>
        -->
        INSERT INTO `user`
            (`username`,
            `birthday`,
            `sex`,
            `address`)
        VALUES (#{username},
                #{birthday},
                #{sex},
                #{address});
    </insert>


    <!-- #############################  升级内容 ###################################################### -->
    <select id="getUserByQueryVo" parameterType="queryvo" resultType="com.mybatis.edu.pojo.User">
        SELECT
            id,
            username,
            birthday,
            sex,
            address
        FROM `user`
        WHERE username LIKE '%${user.username}%'
    </select>


    <select id="getUserByPojo" parameterType="user" resultType="com.mybatis.edu.pojo.User">
        SELECT
            id,
            username,
            birthday,
            sex,
            address
        FROM `user`
        <where>
            <if test="username != null and username != ''">
                and username LIKE '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!-- foreach的使用 -->
    <select id="getUserByIds" parameterType="queryvo" resultType="user">
        SELECT
        <include refid="user_sql"/>
        FROM `user`
        <where>
            <!-- foreach循环标签
                 collection:要遍历的集合
                 open:循环开始之前输出的内容
                 item:设置循环变量
                 separator:分隔符
                 close:循环结束之后输出的内容 -->
            <!-- 目的：id IN(1,25,29,30,35) -->
            <foreach collection="ids" open="id IN(" item="uId" separator=","
                     close=")">
                #{uId}
            </foreach>
        </where>
    </select>


    <!-- 一对多关联查询 -->
    <resultMap type="user" id="user_order_map">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="birthday" column="birthday" />
        <result property="address" column="address" />
        <result property="sex" column="sex" />

        <!-- collection:配置一对多关系
             property:用户下的order属性
             ofType:property的数据类型，支持别名
        -->
        <collection property="orders" ofType="order">
            <!-- id标签用于绑定主键 -->
            <id property="id" column="oid"/>
            <!-- 使用result绑定普通字段 -->
            <result property="userId" column="id"/>
            <result property="number" column="number"/>
            <result property="createtime" column="createtime"/>
        </collection>

    </resultMap>

    <!-- 一对多关联查询 -->
    <select id="getUserOrder" resultMap="user_order_map">
        SELECT
            u.`id`,
            u.`username`,
            u.`birthday`,
            u.`sex`,
            u.`address`,
            o.`id` oid,
            o.`number`,
            o.`createtime`
        FROM `user` u
        LEFT JOIN `order` o
        ON o.`user_id` = u.`id`
    </select>



</mapper>


